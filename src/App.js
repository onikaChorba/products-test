import { useState, useEffect } from "react";
import db from "./firebase.config";
import {
  collection,
  onSnapshot,
  addDoc,
  getDoc,
  doc,
} from "firebase/firestore";
import {
  getAuth,
  onAuthStateChanged,
  signInWithEmailAndPassword,
} from "firebase/auth";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";

const auth = getAuth();

function App() {
  const [products, setProducts] = useState([]);
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [image, setImage] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [user, setUser] = useState(null);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ–≤
  const checkIfAdmin = async (uid) => {
    try {
      const docRef = doc(db, "roles", "admin");
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        const adminData = docSnap.data();
        const adminUids = adminData.uids ? Object.values(adminData.uids) : [];
        console.log("Firestore admin UIDs:", adminUids);
        return adminUids.includes(uid); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ UID —É –º–∞—Å–∏–≤—ñ
      } else {
        console.log("–î–æ–∫—É–º–µ–Ω—Ç 'admin' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Firestore");
        return false;
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", error);
      return false;
    }
  };

  useEffect(() => {
    // üîê –£–≤—ñ–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    signInWithEmailAndPassword(auth, "onika.chorba@gmail.com", "test1111")
      .then((userCredential) => {
        console.log("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥:", userCredential.user.uid);
      })
      .catch((error) => {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", error);
      });

    // üë§ –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    const unsubAuth = onAuthStateChanged(auth, async (user) => {
      if (user) {
        setUser(user);
        const adminStatus = await checkIfAdmin(user.uid);
        console.log("Admin Status:", adminStatus); // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        setIsAdmin(adminStatus);
      } else {
        setUser(null);
        setIsAdmin(false);
      }
    });

    // üì¶ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏
    const unsubProducts = onSnapshot(collection(db, "products"), (snapshot) => {
      const fetched = snapshot.docs.map((doc) => ({
        ...doc.data(),
        id: doc.id,
      }));
      setProducts(fetched);
    });

    return () => {
      unsubAuth();
      unsubProducts();
    };
  }, []);

  const handleAddProduct = async (e) => {
    e.preventDefault();
    if (!name) {
      alert("–î–æ–¥–∞–π –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É");
      return;
    }

    let imageUrl = "";

    if (image) {
      const storage = getStorage();
      const imageRef = ref(storage, `products/${Date.now()}-${image.name}`);
      try {
        const snapshot = await uploadBytes(imageRef, image);
        imageUrl = await getDownloadURL(snapshot.ref);
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", error);
      }
    }

    const newProduct = { name, description, imageUrl };

    try {
      await addDoc(collection(db, "products"), newProduct);
      console.log("–ü—Ä–æ–¥—É–∫—Ç –¥–æ–¥–∞–Ω–æ!");
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É:", error);
    }

    setName("");
    setDescription("");
    setImage(null);
    e.target.reset();
  };

  return (
    <div className="App">
      <h2>–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç</h2>
      {isAdmin ? (
        <form onSubmit={handleAddProduct}>
          <input
            type="text"
            placeholder="–ù–∞–∑–≤–∞"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <input
            type="text"
            placeholder="–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
          <input
            type="file"
            onChange={(e) => setImage(e.target.files[0])}
            accept="image/*"
          />
          <button type="submit">–î–æ–¥–∞—Ç–∏</button>
        </form>
      ) : (
        <p>–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤</p>
      )}

      <h2>–ü—Ä–æ–¥—É–∫—Ç–∏</h2>
      {products.map((product) => (
        <div key={product.id} className="product">
          <h3>{product.name}</h3>
          {product.imageUrl && (
            <img
              src={product.imageUrl}
              alt={product.name}
              style={{ width: 150 }}
            />
          )}
          {product.description && <p>{product.description}</p>}
        </div>
      ))}
    </div>
  );
}

export default App;
